(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{162:function(t,n,s){"use strict";s.r(n);var a=s(0),e=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),s("p",[s("strong",[t._v("RegExp (regular expression)")])]),t._v(" "),s("p",[t._v("正则表达式匹配qq号：/ ^[1-9][0-9]{4,}/  (qq号从10000开始)")]),t._v(" "),s("p",[t._v("用js中的正则表达式去掉两边的空格(str.trim()局限性：无法去除中间的空格)")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//去除所有空格")]),t._v("\n    str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\s*/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//删除左右两端的空格")]),t._v("\n    　　     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(^\\s*)|(\\s*$)/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    　　 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    　　 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ltrim")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//删除左边的空格")]),t._v("\n    　　     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(^\\s*)/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    　　 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    　　 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rtrim")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//删除右边的空格")]),t._v("\n    　　     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(\\s*$)/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    　　 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[t._v("i\t执行对大小写不敏感的匹配\ng\t执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。\nm\t执行多行匹配。\n\nsearch\t检索与正则表达式相匹配的值。\t\nmatch\t找到一个或多个正则表达式的匹配。\t\nreplace\t替换与正则表达式匹配的子串。\t\nsplit\t把字符串分割为字符串数组。\n\n[abc]\t查找方括号之间的任何字符\n[^abc]\t查找任何不在方括号之间的字符。\n[0-9]\t查找任何从 0 至 9 的数字。\n[a-z]\t查找任何从小写 a 到小写 z 的字符。\n[A-Z]\t查找任何从大写 A 到大写 Z 的字符。\n[A-z]\t查找任何从大写 A 到小写 z 的字符。\n[adgk]\t查找给定集合内的任何字符。\n[^adgk]\t查找给定集合外的任何字符。\n\n(red|blue|green)\t查找任何指定的选项。\n\n")])])]),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[t._v(".\t查找单个字符，除了换行和行结束符  \n\\w\t查找单词字符  \n\\W\t查找非单词字符  \n\\d\t查找数字  \n\\D\t查找非数字字符  \n\\s\t查找空白字符  \n\\S\t查找非空白字符  \n\\b\t匹配单词边界  \n\\B\t匹配非单词边界  \n\\0\t查找 NUL 字符  \n\\n\t查找换行符  \n\\f\t查找换页符  \n\\r\t查找回车符  \n\\t\t查找制表符  \n\\v\t查找垂直制表符  \n\\xxx\t查找以八进制数 xxx 规定的字符  \n\\xdd\t查找以十六进制数 dd 规定的字符  \n\\uxxxx\t查找以十六进制数 xxxx 规定的 Unicode 字符\n")])])]),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[t._v("n+\t匹配任何包含至少一个 n 的字符串  \nn*\t匹配任何包含零个或多个 n 的字符串  \nn?\t匹配任何包含零个或一个 n 的字符串  \nn{X}\t匹配包含 X 个 n 的序列的字符串  \nn{X,Y}\t匹配包含 X 至 Y 个 n 的序列的字符串  \nn{X,}\t匹配包含至少 X 个 n 的序列的字符串  \nn$\t匹配任何结尾为 n 的字符串  \n^n\t匹配任何开头为 n 的字符串  \n?=n\t匹配任何其后紧接指定字符串 n 的字符串  \n?!n\t匹配任何其后没有紧接指定字符串 n 的字符串   \n")])])])])}],!1,null,null,null);n.default=e.exports}}]);